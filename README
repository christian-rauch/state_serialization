To use serialization within an orogen task, it needs to depend on the
state_serialization library by adding:
    <depend package="tools/state_serialization" />
to the manifest.xml.

The orogen plugin is activated by adding
    serializable(<type>)
to the *.orogen, where <type>={"text","binary"}.

The orogen plugin will generate methods in the base and user task. The base task
methods provide the common operations used for the remote-procedure-calls and use
the user task methods "serialize" and "deserialize" internally.
De-/serialization is done with boost archives an need to be implemented within
the user task.
E.g.:

// includes for boost archives
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>

// serialization for Eigen matrices
#include <serialization/eigen.hpp>

void Task::serialize(boost::archive::polymorphic_oarchive &oa) {
    // "myImportantMatrix" and "anotherImportantProperty" are pointers to Eigen::MatrixXd
    oa << myImportantMatrix;
    oa << anotherImportantProperty;
};

void Task::deserialize(boost::archive::polymorphic_iarchive &ia) {
    Eigen::MatrixXd *newImportantMatrix = 0;
    Eigen::MatrixXd *newImportantProperty = 0;
    
    // deserialize into new object
    ia >> newImportantMatrix;
    ia >> newImportantProperty;
    
    // set internal variables to new deserialized objects (copy memory)
    *myImportantMatrix = *newImportantMatrix;
    *anotherImportantProperty = *newImportantProperty;
    
    // delete deserialized data in allocated memory
    delete newImportantMatrix;
    delete newImportantProperty;
};

Documentation about boost serialization can be found at:
www.boost.org/libs/serialization/
